{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p>Consistent testing \u2013 for all technologies</p> <p>You can write Galasa tests as a JUnit-style Java class and run them locally from your IDE or in automation without having to change a single line of code. Deep z/OS integration means you can verify data by interrogating the CICS application directly and gives you the ability to check other z/OS resources, such as messages on queues, without using stubs or mocking.</p> <p></p> </li> <li> <p>Focus on the test \u2013 not the integration problems</p> <p>Galasa\u2019s framework enables deep integration tests to be run across multiple technologies. One test case can interact with 3270, Selenium, JMeter, batch jobs and more. When you\u2019re ready, Galasa integrates easily into your DevOps strategy, and can be used alongside other test tools.</p> <p></p> </li> <li> <p>Get the test data you need \u2013 fast</p> <p>Galasa can integrate with your test data strategy by helping you to provision new or existing test data records. Galasa can also lock test data so that many tests can run in parallel against the same test data pool, making it easy to repeat tests under identical conditions for swift debugging. Provisioned environments are automatically deprovisioned at test completion, leaving a clean test system state ready for the next tests.</p> <p></p> </li> <li> <p>See the big picture \u2013 from one location</p> <p>Test results and artifacts are stored in a single location in a uniform style, enabling easy extraction of big picture information. A single place to search all test output makes it easy to quickly identify the cause of a failure and run tests locally to assist with debugging.</p> <p></p> </li> <li> <p>Test planning and recording \u2013 made easy</p> <p>The ability to create a test catalog within Galasa means that you can easily define areas under test, enabling automation of even the most arduous manual tests and making it easy to record and plan what tests have run and what is left to do.</p> <p></p> </li> <li> <p>Keep on growing \u2013 Galasa grows with you</p> <p>Galasa is open source, so can be extended to support additional tooling with no vendor lock-in and no initial cost. The framework supports enterprise level throughput, as the test workload can be scaled horizontally in its own cloud environment.</p> <p></p> </li> </ul>"},{"location":"#deep-integration-testing-for-zos-powered-hybrid-cloud-applications","title":"Deep integration testing for z/OS powered hybrid cloud applications","text":"<p>Allowing you to test applications at scale regardless of platform \u2014 including z/OS.</p> <p>Get started Learn more 0.xx.0 highlights</p>"},{"location":"about/","title":"About Galasa","text":"<p>Galasa, an Open Mainframe Project, is different from other test tools; enabling deep integration testing across platforms and technologies within a DevOps pipeline, Galasa supports repeatable, reliable, agile testing at scale across your enterprise.</p>"},{"location":"about/#platform-integration","title":"Platform integration","text":"<p>The Galasa framework is built with a knowledge of z/OS and cloud native platforms, enabling end-to-end testing of applications that run on different platforms without stubbing or mocking. </p>"},{"location":"about/#technology-integration","title":"Technology integration","text":"<p>Galasa is fully extensible. Galasa Managers enable Galasa to interact with any test technology, such as JMeter, Selenium, JCL, and 3270 screens and more. </p>"},{"location":"about/#pipeline-integration","title":"Pipeline integration","text":"<p>Galasa provides a REST endpoint that can be called from any CI/CD pipeline, for example, a Jenkins pipeline. Running Galasa as part of your pipeline enables fast, reliable testing at scale - Galasa can run thousands of tests in parallel. </p>"},{"location":"about/#enterprise-integration","title":"Enterprise integration","text":"<p>Galasa is not simply about providing the ability to write a test and run it in automation.  Galasa's test catalog enables you to understand and manage your tests, making it easy to schedule the right tests to run at the right time. Test results and artifacts are stored in a single repository, making reporting and problem determination simple when combined with native Kibana and Grafana dashboards. </p> <p>Galasa is open-source, so there\u2019s no vendor lock-in; it can be integrated into an existing pipeline and work with third-party tooling. </p>"},{"location":"about/#using-galasa-in-a-hybrid-cloud-environment","title":"Using Galasa in a hybrid cloud environment","text":"<p>Using hybrid cloud, enterprises can host applications and data on the platforms that deliver the best combination of efficiency, security, and performance. However, a mix of platforms and technologies makes end-to-end integration testing complicated.</p> <p>Galasa simplifies testing in such an environment. The following diagram shows an example of how you can use Galasa to test a hybrid cloud application:  </p> <p></p> <p>This sophisticated solution requires end-to-end integration testing of an application that runs on different platforms (z/OS and Cloud) and uses different technologies (a 3270 emulator, JCL batch job and Selenium Web Driver). </p> <p>When run inside a Galasa Ecosystem, a Galasa test can be invoked from an IDE or as part of a CI/CD pipeline. The Galasa framework initializes the test environment, creates valid test data, runs the test and validates the test output. As all test results and artifacts are stored in one location, it's easy to generate reports and diagnose the cause of any failures.</p>"},{"location":"about/#use-galasa-to-help-you-to","title":"Use Galasa to help you to:","text":"<ul> <li>simplify the construction of new integration tests and incorporate them easily into future regression test suites</li> <li>quickly validate your applications against new releases of middleware or operating system updates</li> <li>deliver new functions to applications fast and with confidence to delight your users </li> <li>easily verify system functionality post maintenance</li> </ul>"},{"location":"about/automation/","title":"Benefits of Galasa","text":"<p>It is estimated that 80% of all enterprise testing is manual. Imagine how much faster you could deploy applications if you could automate a significant proportion of this. </p> <p>Automated testing and agile delivery are traditionally seen as being available only in greenfield projects, but with the introduction of Galasa, you can be agile in a mainframe environment as well. </p>"},{"location":"about/automation/#why-automate-with-galasa","title":"Why automate with Galasa?","text":"<ul> <li>A great fit for automating a wide set of test techniques including golden path, variation and load tests. However, its biggest benefit is that it can be used to create integration level tests.</li> <li>Enables you to run tests across a hybrid cloud application from a single test class.</li> <li>Provides the capability to test a range of interfaces from traditional 3270 terminals through to REST, mobile and browser-based tests.</li> <li>Enables unique, deep integration with z/OS and can be used with other test tools, enabling tests to aggregate information from a range of sources.</li> </ul>"},{"location":"about/automation/#testing-without-limitations","title":"Testing without limitations","text":"<p>Testing an endpoint, whether it be a 3270 terminal, a REST API or a web service is a simple operation and there are plenty of tools that enable you to accomplish this task.  However, there are  limitations to some of these tools:</p> <ul> <li>The tests cannot utilize a mix of technologies.  For example, let\u2019s say you need to examine an IBM CICS or a z/OS resource to validate that the response from the REST endpoint you are testing is correct.  How can the test get this information without the tester understanding how to access it?</li> <li>Most of the tools require some level of manual operation which limits their effectiveness in a continuous delivery pipeline</li> <li>The tools cannot contextually bind to either a provisioned, or pre-existing environment in an intelligent manner.</li> </ul> <p>Galasa makes it simple for a test to access, drive and interrogate a range of z/OS, distributed and open source tools and integrate them together within the same simple test class.</p> <p>Tests written for Galasa can be run locally on your computer for manual debugging or can be scheduled to run on a server in automation mode - great for overnight runs or when you need to run tests in parallel or at scale. </p>"},{"location":"about/automation/#key-benefits-of-using-the-galasa-test-framework","title":"Key benefits of using the Galasa test framework","text":""},{"location":"about/automation/#smooth-integration-with-the-rest-of-your-pipeline","title":"Smooth integration with the rest of your pipeline:","text":"<ul> <li>A single API runs any test regardless of underlying technology.</li> <li>Tests can be dynamically selected from a catalog.</li> <li>Environment stability is assured before tests are run.</li> <li>Test results can be monitored automatically.</li> </ul>"},{"location":"about/automation/#a-single-point-of-control","title":"A single point of control:","text":"<ul> <li>Test artifacts are centrally stored and indexed.</li> <li>Test results are correlated, ensuring the quality of the release for all product components.</li> <li>This is a single control for allocation and management of resources and tests.</li> </ul>"},{"location":"about/automation/#scalable-testing","title":"Scalable testing:","text":"<ul> <li>Late binding of the test material to the system under test allows the same test to run against multiple environments without changing the test.</li> <li>Tests scale horizontally without changing the underlying test code.</li> <li>Management of test isolation means that multiple tests can run in parallel, logically isolated by the framework.</li> </ul>"},{"location":"about/automation/#environment-agnostic-capabilities","title":"Environment-agnostic capabilities:","text":"<ul> <li>Tests can be run against multiple environments as code progresses through release stages.</li> <li>The Galasa test engine allows tests to run locally for easier development and debugging, as well as in the Galasa Ecosystem for production testing at scale.</li> </ul>"},{"location":"about/devops/","title":"Galasa and DevOps","text":""},{"location":"about/devops/#what-is-devops","title":"What is DevOps?","text":"<p>DevOps is a set of processes that enable development and operations teams to continuously deliver high quality software in a fast, reliable, repeatable way.  </p>"},{"location":"about/devops/#benefits-of-galasa-as-part-of-a-devops-strategy","title":"Benefits of Galasa as part of a DevOps strategy","text":"<p>Galasa as part of a DevOps strategy can provide significant benefit in three key areas:</p> <ol> <li> <p>Faster time to value</p> <p>Galasa provides the ability to automate integration tests in a repeatable and reliable way, enabling fast and efficient software delivery and reducing manual effort.</p> </li> <li> <p>Increased capacity to innovate</p> <p>Running your integration tests by using Galasa automation instead of running them manually saves time, freeing up people to work on higher-value activities, such as Site Reliability Engineering (SRE) or exploratory testing.</p> </li> <li> <p>Enhanced customer experience</p> <p>Galasa enables continuous testing, leading to faster, better quality builds. In agile projects, this means you can get early feedback from stakeholders about the software that\u2019s being delivered.</p> </li> </ol>"},{"location":"about/devops/#devops-principles-and-galasa","title":"DevOps principles and Galasa","text":"<p>Galasa supports the following three key principles of DevOps:</p> <ul> <li> <p>Develop and test against production-like systems</p> <p>Galasa supports the DevOps concept \"shift left\", in which operational concerns move earlier in the delivery life cycle, toward development. Galasa tests can bind to a stubbed environment, a virtual machine, or a replica production environment without changing a single line of test code. Teams can test against systems that behave like production to see how the application behaves and performs well before it\u2019s ready for deployment.    </p> </li> <li> <p>Deploy with repeatable, reliable processes</p> <p>Galasa enables development to support an agile software development process all the way through from development to production by using automation to run tests that are iterative, frequent, repeatable, and reliable.</p> </li> <li> <p>Monitor and validate quality</p> <p>When software is tested, Galasa stores the test artifacts in a single repository, making it quicker and easier to analyse and identify the cause of a failure. Test results are captured in a consistent format, making it simpler to compare results.</p> </li> </ul>"},{"location":"about/different/","title":"Why Galasa is different","text":"<p>What makes Galasa different from other testing tools?</p> <p>If you've ever struggled to implement automated testing across a complex technology stack, you might recognize some of the issues that we identified during our design process. Expand the following headings to see how Galasa solves these challenges.</p>"},{"location":"about/different/#running-consistent-repeatable-reliable-tests-across-the-application-stack","title":"Running consistent, repeatable, reliable tests across the application stack:","text":""},{"location":"about/different/#ensuring-consistent-testing-across-technologies","title":"Ensuring consistent testing across technologies","text":"<p>Automating tests effectively and consistently across multiple environments and multiple tools requires a framework that can support and integrate across the whole application stack. The same test must also be capable of running against multiple z/OS environments without code changes.</p> <p>Galasa is designed to work in hybrid cloud applications, operating with the entire application stack, so you can provision in a cloud environment, but bind to a z/OS test environment. The Galasa framework integrates and wrappers multiple techonolgies and test tooling in a consistent way, providing a platform to test different aspects of the application stack in the same language and in the same fashion. One test case can interact with 3270 emulators, Selenium, JMeter, batch jobs and other applications. </p>"},{"location":"about/different/#verification-and-validation-without-mocking-or-stubbing","title":"Verification and validation without mocking or stubbing","text":"<p>Verifying and validating data at every boundary without stubbing or mocking is hard.  Galasa enables real data verification by interrogating a CICS (or other) application directly or by enabling the checking of other z/OS resources, for example, messages on queues or the updating of log streams.</p>"},{"location":"about/different/#reliability-and-availability-of-test-data","title":"Reliability and availability of test data","text":"<p>Test data is often in a state of flux, resulting in the breaking of existing tests and difficulty in snapshotting and data integrity.</p> <p>Galasa provides the mechanisms through the use of Application Managers to either generate test data on the fly, or to locate valid test data from a data lake. Data can then be locked whilst in use, preventing cross contamination with other running tests.</p> <p>You can integrate Galasa tests with your existing tooling, allowing you to share data between tools within the same test.</p>"},{"location":"about/different/#running-the-same-test-locally-and-in-automation","title":"Running the same test locally and in automation","text":"<p>Tests need to be run on demand and in automation. Running and re-running manual tests is laborious, time consuming and not exactly the best use of a tester's skills or time.  Galasa tests can be run locally from your own IDE, or in automation without changing a single line of test code. </p> <p>With Galasa you can automate and automatically schedule these repetitive regression tests and use the time saved to free up testers to spend their time designing test cases that are more likely to find important defects.</p> <p>Once written, a Galasa test is available 24x7 for reuse.</p>"},{"location":"about/different/#centralizing-maintaining-and-storing-results-consistently","title":"Centralizing, maintaining and storing results consistently:","text":""},{"location":"about/different/#maintaining-recording-and-planning-with-a-large-suite-of-tests","title":"Maintaining, recording and planning with a large suite of tests","text":"<p>Maintaining a set of test materials (which could be written in several different languages), recording which tests have been run, and scheduling any outstanding tests is difficult and time consuming. Manual tests are often split across teams and reported separately, with no single, consistent view of the testing.</p> <p>The Galasa test catalog provides the ability to generate a clear description of the areas covered by any given test. Related tests can be stored within a shared test catalog, from which tests can be automatically selected to run for any given change set. Automated regression test suites can be created for new software versions, so you can run a specified set of tests for automated baselining of a new environment installation, such as a hardware migration. </p>"},{"location":"about/different/#diagnosing-failures","title":"Diagnosing failures","text":"<p>Investigating test failures takes up time and can be particularly tedious with larger scripts. Test artifacts are often stored in lots of different repositories, making it time-consuming and difficult to locate the right information to help you root out the cause of a failure.</p> <p>Galasa automatically stores all test artifacts in a single, central repository, making diagnostics quicker and easier and allowing big picture information to be extracted easily. You can also debug tests using a local instance of Galasa, so you can examine every line of code.</p>"},{"location":"about/different/#big-picture-communication","title":"Big picture communication","text":"<p>Test results are often stored in spreadsheets and manually approved by product owners before changes are promoted. This makes it difficult to understand the tests that have been run, and the manual intervention required as part of the sign-off process can delay delivery.</p> <p>Galasa's dashboard integrates all your test results in one place, making reporting and reviewing between test phases easy and consistent.</p>"},{"location":"about/different/#extensibility-and-scalability-future-proofing-your-testing","title":"Extensibility and scalability - future-proofing your testing:","text":""},{"location":"about/different/#maintaining-performance-levels","title":"Maintaining performance levels","text":"<p>Running scripts and tooling on tools such as Jenkins can lead to performance issues \u2013 ideally the tests and the Jenkins nodes should not share workload. Whilst you don\u2019t want to miss defects by limiting the number of tests run, the more tests that are running the longer the testing phase takes, and the increased amount of computer resources that are required from the Jenkins node will limit the throughput. Locking resources within the framework prevents tests from colliding; instead tests are queued until those resources become available.</p> <p>Galasa\u2019s tests as a service allows the test workload to be moved off a Jenkins node, with the added benefit of being capable to scale horizontally in its own cloud environment. </p>"},{"location":"about/different/#expanding-pipelines","title":"Expanding pipelines","text":"<p>The addition of new 3<sup>rd</sup> party tooling can lead to problems with managing test artifacts. Maintaining, updating and ensuring compliance on Jenkins servers with increasing numbers of plugins is time-consuming. </p> <p>Galasa is open source so can be extended to support additional specific tooling. In addition, Galasa manages its own plugins, so less manual intervention is required for installation and updates.  </p>"},{"location":"about/different/#deep-integration-testing-at-scale","title":"Deep integration testing at scale","text":"<p>It can be difficult to ensure that testing across cloud and z/OS platforms is kept aligned.  If z/OS is the best place for the application to run, but developing a solution there is slower than elsewhere, it can cause problems. Manual testing can be tedious and error prone, making it time consuming to get an entire application thoroughly tested, both in terms of depth of testing and in breadth of coverage.</p> <p>Galasa tests can scale horizontally without changing the underlying test code and the framework enables test isolation, so that multiple tests can run in parallel, logically isolated by the framework.</p>"},{"location":"about/different/#minimizing-manual-intervention","title":"Minimizing manual intervention","text":"<p>Manual testing involves a significant amount of human intervention, which means tests can take too long to write and are hard to understand and maintain. This process is particularly laborious and expensive when problems are found and re-builds required.</p> <p>Galasa makes tests quicker to write and easier to maintain by extracting the boilerplate code out of the tests. Just import the components you need from within your test code to access the abstracted functionality, gaining the benefit of the expertise of the person who wrote them, and the productivity introduced by their simple use.</p>"},{"location":"about/different/#summary","title":"Summary","text":"<p>Galasa is an open source deep integration test framework for teams looking to give more power to their testers. What makes Galasa a deep integration test framework is its ability to support tests that cross system boundaries and reach into remote layers inaccessible to other test tools. </p> <p>Galasa has been architected to ensure that the routine tasks of writing and executing tests are straightforward. The more complex parts of tests (such as provisioning) are abstracted into other components that can be written by experts and easily distributed to the team.</p> <p>Galasa is open source, so can be extended to support additional tooling. The framework is scalable, capable of supporting enterprise level throughput, whilst ensuring that resources are managed reliably.</p>"},{"location":"about/history/","title":"A brief history of Galasa","text":""},{"location":"about/history/#the-problem","title":"The Problem","text":"<p>Galasa started life as JAT (JUnit Automated Testing) - an internal IBM tool extensively used for integration testing within IBM z/OS teams. It was created to help eliminate repetitive manual and semi-automated testing. These manual tests could be complex and take a long time to set up and run, increasing the risk of introducing human-error into the process. It was also time-consuming to identify the cause of failures, as diagnostics were stored in different repositories, including logs and program compilation output on z/OS, and test script log output on laptops. Changes to IBM CICS could take many weeks to reach Beta as tests took too long to execute, increasing the time required to deliver. </p>"},{"location":"about/history/#the-solution","title":"The Solution","text":"<p>JAT was created to solve these problems. The framework was inspired by JUnit but with a focus on functional and integration testing. JAT is written in Java - in part because of Java's run-anywhere capability, huge number of utility libraries and its extensive ecosystem. However, the team found that Java expertise is not essential to use it. </p> <p>Executing a test was made much easier and quicker as test code could be run at the push of a single button. Automated scheduling of test runs enabled the continuous testing of new code in a timely and cost-effective manner.</p> <p>In JAT, all aspects of a test run are automatically recorded and stored in a single repository. If a test fails in an automated pipeline, simplified access to logs, screenshots and data makes it quick and easy to diagnose the problem. The system is highly scalable, allowing a large number of tests to be run in parallel against many releases of CICS, enabling IBM to deliver a consistent, reliable product.</p>"},{"location":"about/history/#the-result","title":"The Result","text":"<p>After JAT was rolled out across CICS, the team fully automated their tests, including tasks such as creating test data, running batch jobs, invoking RESTful interfaces, interacting with 3270 terminals, and provisioning and de-provisioning test environments. Manual regression was virtually eliminated, giving the team more time to focus on exploratory testing to root out hard-to-find defects. Repeatable, scalable and reliable integration tests running as part of the DevOps pipeline helped to reduce the delivery of a new CICS feature from 18 to 3 months without any loss of confidence in quality. In fact, JAT was so successful, that it was adopted by other teams across IBM. </p>"},{"location":"about/history/#the-future","title":"The Future","text":"<p>The success of JAT inspired us to perfect the architecture and release our exciting new framework as Galasa. </p> <p>Galasa is a type of Snout Moth and a moth was attached to the first \"bug\" report by Grace Hopper where she reported the \"first actual case of a bug being found\" as a moth had flown into a relay. While we do not know if it was a Galasa moth in the relay, we quite like the name.</p> <p>We\u2019d love you to get involved with the project and help us establish a collaborative community where we can share great ideas and build new, cool Galasa features together.</p>"},{"location":"community/","title":"Get involved","text":"<p>Galasa thrives on users\u2019 collaboration, contributions and creativity and we invite you to share your skills and ideas at all levels.</p> <p>Check out the Contributing to Galasa guidelines to propose fixes, add new features or improve the software and documentation.</p> <p>Join us on the Open Mainframe Project Slack workspace where we discuss new features and provide support for each other. Register to join first if you're not yet a member.</p> <p>We have the following available Slack channels:</p> <ul> <li><code>#galasa-dev</code> - for developers of Galasa code or Galasa extensions </li> <li><code>#galasa-users</code> - for users comments, and for making announcements </li> <li><code>#galasa-tsc</code> - for technical steering committee discussions on longer term over-arching issues relating to Galasa </li> </ul>"},{"location":"docs/","title":"Galasa Documentation","text":"<p>Placeholder</p>"},{"location":"docs/ecosystem/","title":"The Galasa Ecosystem","text":"<p>Placeholder</p>"},{"location":"hub/","title":"Galasa Blogs","text":"<p>Stay up-to-date with all things Galasa with blogs, podcasts and videos from fellow Galasians.</p> <p>Galasa blogs that are hosted by the Open Mainframe Project are available on the Galasa page of the website.</p>"},{"location":"hub/2021/01/25/using-galasa-to-streamline-cics-testing/","title":"Using Galasa to streamline CICS testing","text":"<p>Before software goes into production, it needs to be tested, and \"It looks good to me\" just isn't good enough. To ensure maximum coverage is attained, testing tools and frameworks are the way to go, and in this episode of A Terminal Talk podcast, we hear from Will Yates and Michael Baylis about how the Galasa Project helps them ensure solutions pass all the right tests.</p> <p> Listen to the podcast</p> <p>Speakers: Will Yates &amp; Michael Baylis Source: A Terminal Talk podcast</p>"},{"location":"hub/2021/03/29/integration-testing-for-hybrid-cloud-applications-using-galasa/","title":"Integration testing for Hybrid Cloud Applications using Galasa","text":"<p>This paper explains how this testing can be achieved only in an effective and efficient way by autenable such automation. We specifically focus on Galasa. Galasa is an open-source deep integration test framework for hybrid cloud applications that allows teams to automate tests to run as part of a DevOps pipeline.</p> <p> Read the story</p> <p>Author: Michael Baylis and Others Source: An IBM Redpaper publication</p>"},{"location":"hub/2021/04/09/mainframe-a-la-mode-galasa---integration-testing-for-ibm-z-and-beyond/","title":"Mainframe a La Mode: Galasa - Integration testing for IBM Z and beyond","text":"<p>Galasa's open source automation framework enables mainframe developers to automate their apps for both IBM and hybrid cloud.</p> <p> Watch the video</p> <p>Author: Matthew Cousens, &amp; Will Yates Source: IBM Developer</p>"},{"location":"hub/2021/09/21/goodbye-manual-zos-scenarioshello-galasa/","title":"Goodbye Manual z/OS Scenarios\u2026Hello Galasa!","text":"<p>Find out how the IBM Z and z/OS Platform Evaluation and Test (zPET) team are using Galasa to help them automate their manual scenarios and discover their future plans for Galasa.</p> <p> Read the blog</p> <p>Author: Gene Nitka Source: IBM Developer</p>"},{"location":"hub/2022/03/24/whats-new-in-ibm-distribution-for-galasa-102/","title":"What's new in IBM Distribution for Galasa 1.0.2","text":"<p>Will Yates goes into some of the new features that made it into IBM Distribution for Galasa 1.0.2 and how these complement IBM Virtual Test Platform.</p> <p> Read the blog</p> <p>Author: Will Yates Source: IBM Developer</p>"},{"location":"hub/2023/09/11/galasa-bringing-automated-test-commodity-to-open-source/","title":"Galasa bringing automated test commodity to open source","text":"<p>No enterprise application exists as an island anymore. Find out how Galasa has modernized the test processes that validate the quality of applications with end-to end integration testing that integrates with other open-source tooling.</p> <p> Read the blog</p> <p>Author: Will Yates Source: Open Mainframe Project</p>"},{"location":"hub/2023/09/11/open-mainframe-project-welcomes-galasa-into-its-ecosystem/","title":"Open Mainframe Project Welcomes Galasa into its Ecosystem","text":"<p>The Open Mainframe Project, an open-source initiative that enables collaboration across the mainframe community to develop shared tool sets and resources, today welcomed Galasa, a project that offers developers the ability to test applications at scale regardless of platform, into its ecosystem.</p> <p> Read the Press release</p> <p>Author: Maemalynn Meanor Source: Open Mainframe Project</p>"},{"location":"hub/2023/10/25/the-galasa-configuration-property-store/","title":"The Galasa Configuration Property Store","text":"<p>Integration testing can be complicated. Tests often require configuration parameters to bind to a specific test environment. Galasa Managers require configuration so that systems under test can be contacted. This information needs to stored in a single, central repository that is shareable to the Galasa framework, Ecosystem, Managers and tests. Find out how Galasa solves these challenges by its use of the Configuration Property Store (CPS). Watch the video to understand the features of the Galasa CPS, and see a demonstration on manipulating the values in a CPS by using the Galasa command line (Galasa CLI). Use the information to help you to simplify your test configuration, set Ecosystem-wide configuration properties, and set parameters and credentials on the Ecosystem for tests to read and use at runtime.</p> <p> Watch the video</p> <p>Author: Mike Cobbett, Savaas Kyriacou Source: YouTube</p>"},{"location":"hub/2023/11/17/the-galasa-command-line-tool/","title":"The Galasa command line tool","text":"<p>Learn about the software requirements you need to get started with the Galasa command line tool (galasactl)and find out how to download and install it on your local machine. Watch a demo that takes you through the process of creating, building and running Galasa tests, and viewing the output of those test runs.</p> <p> Watch the video</p> <p>Author: Mike Cobbett Source: YouTube</p>"},{"location":"hub/2023/12/18/galasa-my-first-6-months-as-a-tsc-chair/","title":"Galasa: My First 6 Months as a TSC Chair","text":"<p>Read the blog post by Louisa Seers to find out about her experiences and thoughts during her first six months as Galasa IBM Product Manager and Chair of the Galasa Technical Steering Committee (TSC), and the Galasa journey to adoption by the Open Mainframe Project (OMP).</p> <p> Read the blog</p> <p>Author: Louisa Seers Source: Open Mainframe Project</p>"},{"location":"hub/2024/02/12/galasa-what-is-application-integration-testing/","title":"Galasa: What is Application Integration Testing?","text":"<p>Application integration allows software to be created as a unique and bespoke set of applications that knit together to form critical business processes. Application integration testing ensures that individual components interact with each other in a desirable way, and automation of this stage of testing is critical because there typically are so many configurations, routes, and scenarios to consider. Galasa could be your first step to understanding how to build test cases that cover multiple applications and can even be extended to cover proprietary applications with the use of Managers. Read the blog post by Louisa Seers to find out more.</p> <p> Read the blog</p> <p>Author: Louisa Seers Source: Open Mainframe Project</p>"},{"location":"releases/","title":"Highlights","text":"<p>Placeholder</p>"},{"location":"releases/license/","title":"License","text":"<p>Galasa is licensed under Eclipse Public License 2.0 </p>"},{"location":"support/","title":"Support","text":"<p>If you find any problems whilst you\u2019re using Galasa, get in touch and get the help you need:</p> <ul> <li> <p>Search our project management repository on GitHub; perhaps someone has already had a similar issue and solved it.</p> </li> <li> <p>If you have an error message or java stack trace exception, feel free to raise an issue in the project management repository and the Galasa community will get back to you as soon as possible.</p> </li> <li> <p>Post a question in the Open Mainframe Project Slack workspace. Register to join first if you're not yet a member. We have the following available Slack channels:</p> <ul> <li><code>#galasa-dev</code> - for developers of Galasa code or Galasa extensions </li> <li><code>#galasa-users</code> - for users comments, and for making announcements </li> <li><code>#galasa-tsc</code> - for technical steering committee discussions on longer term over-arching issues relating to Galasa    </li> </ul> </li> </ul> <p>If your issue requires a code change, the community will do their best to respond and fix the problem as soon as they can. Depending on the severity of the issue, the fix might be scheduled for a future release of Galasa. Alternatively, the fix might be back ported to the current release. Naturally this is always a community decision and your input is just as important.</p> <p>If you want to have a go at fixing the defect yourself, let us know and we will help you to try and fix the issue.</p> <p>We are open to suggestions about more formal support, come and talk to us - we would love to hear from you.</p>"},{"location":"hub/archive/2024/","title":"2024","text":""},{"location":"hub/archive/2023/","title":"2023","text":""},{"location":"hub/archive/2022/","title":"2022","text":""},{"location":"hub/archive/2021/","title":"2021","text":""},{"location":"hub/category/blog/","title":"Blog","text":""},{"location":"hub/category/video/","title":"Video","text":""},{"location":"hub/category/press-release/","title":"Press release","text":""},{"location":"hub/category/redpaper/","title":"Redpaper","text":""},{"location":"hub/category/podcast/","title":"Podcast","text":""},{"location":"hub/page/2/","title":"Galasa Blogs","text":""}]}